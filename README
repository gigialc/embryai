# EmbryoML: Embryo Survival Classification with Federated Learning

## Overview
EmbryoML is a federated learning framework for binary classification of embryo survival. The project implements privacy-preserving machine learning techniques where all training data remains local to each client, while a global model is collaboratively trained. This approach is particularly valuable in medical applications where data privacy is paramount.

## Features
- Binary classification of embryo survival
- Federated learning implementation (using Flower framework)
- CNN-based model architecture
- Privacy-preserving approach (no raw data sharing)
- Synthetic dataset generation for testing

## Installation

### Prerequisites
- Python 3.8+
- PyTorch 2.0+
- Flower 1.16+

### Setup
1. Clone the repository:
```bash
git clone https://github.com/yourusername/embryo-ml.git
cd embryo-ml
```

2. Create and activate a virtual environment:
```bash
python -m venv embryo_venv
source embryo_venv/bin/activate  # On Windows: embryo_venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install torch torchvision flwr matplotlib numpy pillow gdown requests bs4
```

## Usage

### Running the federated learning simulation
```bash
python "EmbryoML Binary Classification and Federated Learning.py"
```

The script will:
1. Set up a synthetic dataset if not already available
2. Create multiple virtual clients (simulating different hospitals/clinics)
3. Train a global model using federated learning techniques
4. Report the average loss and accuracy per round

## Code Structure
- **Net**: CNN-based model for embryo classification
- **EmbryoDataset**: Custom dataset loader for embryo images
- **FlowerClient**: Client implementation for federated learning
- **Federated Learning Flow**: Parameter aggregation using FedAvg strategy

## Federated Learning Process
1. Initialize a global model
2. For each round:
   - Send global model to all clients
   - Train locally on each client's private data
   - Send updated model parameters (not data) back to server
   - Aggregate parameters using weighted averaging
   - Update global model
   - Evaluate on validation data

## Dataset
The project can work with real embryo images or generate a synthetic dataset for testing purposes. The synthetic dataset consists of:
- 1000 random images (500 positive, 500 negative)
- Size: 224x224 pixels

## Model Architecture
The CNN architecture consists of:
- 2 convolutional layers with max pooling
- 3 fully connected layers
- Final output layer with 2 neurons (binary classification)

## Results
The federated learning process typically runs for 3 rounds and reports:
- Average loss
- Average accuracy

Example output:
```
Round 1/3
Round 1 results:
Average loss: 0.6981
Average accuracy: 0.4100

Round 2/3
Round 2 results:
Average loss: 0.6747
Average accuracy: 0.6000

Round 3/3
Round 3 results:
Average loss: 1.4794
Average accuracy: 0.4000
```

## Future Work
- Implement differential privacy techniques
- Optimize model architecture for embryo classification
- Add real-world dataset support
- Create visualization tools for model performance

## Acknowledgements
This project was created by Maria, Gigi, and Age.

## License
[MIT License](LICENSE) 